---
description: General Rules
globs: 
---
---
description: General Rules
globs: *.mdc
---
You are an expert full-stack Nuxt developer working on a Nuxt 3 project.

## High Level Project Spec

This section gives a high-level overview of the app we're creating in this project.

- It's a game where players (2-5) gain and lose RP (relationship points) based on cards and events drawn over the course of a year. The player with most RPs at the end of the year wins.

## Project Context and Architecture

SYSTEM_CONTEXT: |
  Required file reads on startup:
  - PROJECT_ROOT/.cursor/rules/**: Contains more rules to follow
  - PROJECT_ROOT/.cursor/tasks/tasks.md: Current development tasks and requirements
  - PROJECT_ROOT/.cursor/docs/status.md: Project progress and state

  Before making any changes:
  1. Check current task context from tasks.md
  2. Update progress in docs/status.md

## File Management Rules

ON_FILE_CHANGE: |
  Required actions after any code changes:
  1. UPDATE PROJECT_ROOT/.cursor/docs/status.md with:
     - Current progress
     - Any new issues encountered
     - Completed items
  2. VERIFY task progress against tasks/tasks.md

## Code Style and Patterns

TYPESCRIPT_GUIDELINES: |
  - Types are defined using ArkType library in a single `types.ts` file at the root of the project `PROJECT_ROOT/types.ts`
  - Use strict typing, avoid 'any'
  - Follow SOLID principles
  - Write unit tests for all public methods
  - Document with JSDoc

example of ArkType type:
```ts
import { type } from "arktype"
const user = type({
	name: "string",
	platform: "'android' | 'ios'",
	"versions?": "(number | string)[]"
})

type User = typeof user.infer
```

## Task Management

TASK_WORKFLOW: |
  Required files:
  - tasks/tasks.md: Source of task definitions
  - docs/status.md: Progress tracking
  
  Workflow steps:
  1. READ tasks/tasks.md:
     - Parse current task requirements
     - Extract acceptance criteria
     - Identify dependencies
  
  2. UPDATE docs/status.md:
     - Mark task as in-progress
     - Track completion of sub-tasks
     - Document any blockers
  
  3. IMPLEMENT following TDD:
     - Create test files first
     - Implement to pass tests
     - Update status on test completion

This is an example task:
```md
# Current Sprint Tasks

## USER-001: Implement User Authentication
Status: In Progress
Priority: High
Dependencies: None

### Requirements
- Email/password authentication
- JWT token generation
- Password hashing with bcrypt
- Rate limiting on login attempts

### Acceptance Criteria
1. Users can register with email/password
2. Users receive JWT on successful login
3. Passwords are securely hashed
4. Failed login attempts are rate limited

### Technical Notes
- Use @nestjs/jwt for token management
- Implement rate limiting using Redis
- Follow authentication patterns from technical.md
```

This is an example Project Status:
```md
# Project Status

## Completed Features
- Basic project setup
- Database connections
- Base module structure

## In Progress
- User authentication (USER-001)
  - ‚úÖ Basic user model
  - ‚úÖ Password hashing
  - üèóÔ∏è JWT implementation
  - ‚è≥ Rate limiting

## Pending
- Email verification
- Password reset flow
- User profile management

## Known Issues
- None currently
```

## Error Prevention

VALIDATION_RULES: |
  1. Verify type consistency
  2. Check for potential null/undefined
  3. Validate against business rules
  4. Ensure error handling

## Project Dependencies Patterns and Rules

Use bun to install new modules.

The following Nuxt modules and dependencies are definitely installed and can be utilized in the proper places (this is NOT an exhaustive list):

- @vueuse/nuxt
- @nuxtjs/tailwindcss
- @nuxt/test-utils, vitest, @vue/test-utils, happy-dom, playwright-core (https://nuxt.com/docs/getting-started/testing)
- @nuxt/eslint

## Styles Patterns and Rules

This section describes rules to use when styling components or pages

- Use TailwindCSS classes to apply styles.
- Always account for dark mode.

## General Coding Patterns and Rules

This section describes general rules for code throughout the project:

- When adding a new feature, do NOT alter code that is already in place unless necessary. If you do alter existing code besides simply moving it up or down in the file where it already exists, warn me (‚ùóÔ∏èSHOUT WITH LARGE LETTERS‚ùóÔ∏è) and thoroughly explain your reasoning for moving it.
- always leave explanatory comments inline in the code to help me better understand what's happening in a file when I come back to it later. Use these comments to explain why the code was written as it was.

## API Endpoint Coding Patterns and Rules

This section describes some patterns to follow when creating and ONLY when creating a new API endpoint in the `server/api` directory.

- Use ArkType to validate the request payload (this includes query variables, JSON body, and route params all spread into a single object)
- extract database and other storage logic into a separate service and use the service in the API endpoint
- create all CRUD methods for an API as seperate files. For example:
  - `[file-path]` | [method] | `[url]`
  - `server/api/posts/index.ts` | GET | `api/posts/`
  - `server/api/posts/index.post.ts` | POST | `api/posts/`
  - `server/api/posts/[id].put.ts` | PUT | `api/posts/[id]`
  - `server/api/posts/[id].delete.ts` | DELETE | `api/posts/[id]`
- NEVER handle different request methods for an API endpoint in the same file.

## Server Service Coding Patterns and Rules

This section describes some patterns to follow when creating server-side services in `server/utils/services` for use within API endpoints. These rules ONLY apply for server-side services.

- all server-side services should live in relevant files within `@/server/utils/services` (such as `@/server/utils/services/users.service.ts` for user services)
- All server-side services should also be exported from `@/server/utils/services/index.ts` so that they are auto-imported. For example:
- For example:

  ```
  // @/server/helpers/services/user.service.ts
  export const useUserService(){}

  // @/server/helper/services/index.ts
  export * from "./user.service.ts"

  ```

## API Endpoint Guards Coding Patterns and Rules

- define and/or use existing server utils that are defined in `server/utils/guards` to apply route specific middleware/guards.
- Such middleware/guards should be functions that either throw a new error with createError and a relevant statusCode or return an aribtrary body.
- This middleware should also always be passed the validated payload

## Vue Component Coding Patterns and Rules

This section describes some patterns to follow when creating new or updating existing Vue components.

- Do NOT create long components with a lot of responsibilities. Instead, break components down into smaller, more focused components
- make most components "dumb" components. These focus on:
  - presentation
  - simple logic
  - Dumb components should include the keyword `Dumb` before the file suffix like this: `UserProfileCardDumb.vue`
- Limit "smart" components that make requests to API endpoints to only what's absolutely necessary
- break complex logic into composables or utility functions
- Always use TypeScript to define all components.
- Use Typescript to define component props and emits.
- use JS docs to document component props and emits
- Use script setup
- Provide the component sections in the following order:
  - script
  - template
  - style
- Use the built in Nuxt $fetch function instead of browser native fetch when reacting to user events and in lifecylcle hooks (except setup). Basically, anything that only runs in the browser (in the client) should use $fetch
- Any code that runs at the root level of script setup, should make https requests with useFetch or useAsyncData. Prefer useFetch when possible.
- Example of when to use $fetch vs useFetch:

```
<script setup lang="ts">
  const { data: users } = await useFetch("/api/users");
  async function createUser(newUser: User){
   const newUser = await $fetch('/api/users', {
       method: 'POST',
       body: newUser
   })
  }
```

Components are named and auto imported based on their location within the components directory. For example:

- A component stored in `@/components/MyComponent` will be named MyComponent.
- A component stored in `@/components/users/UsersMyComponent` will be named UsersMyComponent
- ALWAYS prefix the component name with any directory it's nested under within the components directory

- Always use NuxtImg as a drop in replacement for ANY img tag. Be sure to specify appropriate width and heights to prevent CLS and configure styles so that the image is NEVER stretched or distorted
- When using NuxtImg on a src url that is from another site, make sure the domain is registered in nuxt.config.ts like this:

  ```
  image: {
    domains: ["images.unsplash.com", "[the-domain-here]", "etc"],
  },
  ```

## Dummy Data Coding Patterns and Rules

When adding new dummy data always:

- Use placeholder images from lorem picsum when no specific image is provided or available within the codebase

- Use placeholder avatar images from https://avatar.iran.liara.run/public/[boy|girl] for dummy avatar data if nothing specific is provided


## Testing

- Tests are run by using command `bun vitest run`.
- Tests are to be executed after a successful iteration.
- Tests are in the PROJECT_ROOT/test folder and follow the same structure as the PROJECT_ROOT/app folder:
If i'm testing `app/components/Button` the test will be in `test/components/Button`
- When all tests pass generate commit messages using the appropriate rule. Rules are found in PROJECT_ROOT/.cursor/rules/
- After a successful task, run tests to ensure no regressions were introduced.

## Rules

- Rules are found in PROJECT_ROOT/.cursor/rules/
- The Rule to create other rules is in PROJECT_ROOT/.cursor/rules/rules_location.mdc
- Always follow the rules. If there is any conflict ask for clarification.
